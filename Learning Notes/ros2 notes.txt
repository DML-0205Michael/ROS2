======================03 ROS Version Switch and TEst======================
to use noetic: comment "source /opt/ros/foxy/setup.bash" in .bashrc
to use foxy: uncomment "source /opt/ros/foxy/setup.bash" in .bashrc, comment all noetic related source other wise can't use Tab or double Tab in terminal

ros2 run demo_nodes_cpp talker
ros2 run demo_nodes_cpp listener

ros2 run turtlesim turtlesim_node
ros2 run turtlesim turtle_teleop_key

======================04 Linux and ROS2 commands======================
1. rm -R /folder              :delete folder

2. 
In ROS1    In ROS2
rosnode = ros2 node list/info...
rostopic = ros2 topic list/pub/echo...

3. publish cmd_vel
Yes: x: 2.0
NO:  x:2.0
ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist "{linear:{x: 2.0,y: 0.0,z: 0.0},angular:{x: 2.5,y: 0.0,z: 10.0}}"

4. spawn a turtle
ros2 service call /spawn turtlesim/srv/Spawn "{x: 2, y: 2, theta: 0.2, name: 'ksdjgefirb'}"

5. record
ros2 bag record /turtle1/cmd_vel
ros2 bag play [file_name]/

======================06 Create workspace ======================
1.
rosdepc install -i --from-path src --rosdistro foxy -y

if error: rosdepc update --include-eol-distros
and then: rosdepc install -i --from-path src --rosdistro foxy -y

2. compile
colcon build
if compile error with learning_action_cpp, follow "Humble与Foxy版本兼容性说明.md"

3. create package
ros2 pkg create --build-type <build-ype> <package_name>
ros2 pkg create --build-type ament_cmake learning_pkg_c
ros2 pkg create learning_pkg_c
ros2 pkg create --build-type ament_python learning_pkg_python

source install/local_setup.bash

======================3.5.2 Node ======================
1. create a node
#include "rclcpp/rclcpp.hpp"

int main(int argc, char **argv){
    rclcpp::init(argc,argv);

    auto node = std::make_shared<rclcpp::Node>("node_1_1name");
    RCLCPP_INFO(node->get_logger(),"This is node 1.");
    rclcpp::spin(node);
    
    rclcpp::shutdown();
}

2. add to CmakeLists
add_executable(node_nick_name src/node_file_name.cpp)
ament_target_dependencies(node_nick_name rclcpp)

install(TARGETS
  node_nick_name
  # Yes:
  DESTINATION lib/learning # lib/<package name>, project(learning) in line 2
  
  # NO: 
  # DESTINATION lib/$(PROJECT_NAME)
)

3. ros2 run learning node_nick_name

ros2 node list
ros2 node info /node1_name

======================4.2 Topic ======================
rqt_graph
ros2 topic list
ros2 topic list -t            :show msg type
ros2 topic echo /topic_name
ros2 topic info
ros2 interface show <Tab>
ros2 topic pub arg            :manual publish a topic
ros2 topic pub /topic_name std_msgs/msg/String "{data: '2333'}"
ros2 topic pub /cmd_vel geometry_msgs/msg/Twist "{linear

======================4.3 Interface ======================
ros2 interface list
ros2 interface packages
ros2 interface package std_msgs
ros2 interface show std_msgs/msg/String
ros2 interface proto sensor_msg/msg/Image

Create UDF message package
1. 
ros2 pkg create msg_pkg --build-type ament_cmake

2.
new folder "msg", new file "Test.msg" start with cap letter

3. define msg
float32 ax
string content
sensor_msgs/Image image
....

4. add to CMakeList.txt, rosidl_generate_interfaces() must be called before ament_package()
find_package(std_msgs REQUIRED)
find_package(rosidl_default_generators REQUIRED)

rosidl_generate_interfaces(${PROJECT_NAME}
  "msg/Test.msg"
  DEPENDENCIES std_msgs
)

5. add to package.xml after this line: <buildtool_depend>ament_cmake</buildtool_depend>
add following four lines
  <depend>std_msgs</depend>
  <build_depend>rosidl_default_generators</build_depend>
  <exec_depend>rosidl_default_runtime</exec_depend>
  <member_of_group>rosidl_interface_packages</member_of_group>

6. Test
source install/setup.sh or restart terminal
ros2 interface package msg_pkg
ros2 interface show msg_pkg/msg/Test
ros2 interface proto msg_pkg/msg/Test


======================4.4 Service ======================
ros2 service list
rqt -> plugins -> Service -> Service Caller
ros2 service type /add_two_ints
ros2 interface show example_interfaces/srv/AddTwoInts
ros2 service find example_interfaces/srv/AddTwoInts

Create UDF service message package
1. 
ros2 pkg create msg_pkg --build-type ament_cmake

2.
new folder "srv", new file "Test.srv" start with cap letter

3. define msg
float32 a
float32 b
---
float32 c

4. in CMakeList.txt
find_package(std_msgs REQUIRED)
find_package(rosidl_default_generators REQUIRED)

rosidl_generate_interfaces(${PROJECT_NAME}
  "msg/Test.msg"
  "srv/Test.srv"
  DEPENDENCIES std_msgs
)

5. in package.xml after this line: <buildtool_depend>ament_cmake</buildtool_depend>
<depend>std_msgs</depend>
<build_depend>rosidl_default_generators</build_depend>
<exec_depend>rosidl_default_runtime</exec_depend>
<member_of_group>rosidl_interface_packages</member_of_group>

6. test
ros2 interface list
ros2 interface show msg_pkg/srv/Test


Add dependencies for needed pkg and node
1. in package.xml, after <depend>rclcpp</depend>, add
  <depend>msg_pkg</depend>

2. in CMakeLIsts.txt
find_package(msg_pkg REQUIRED)

add_executable(service_test src/server.cpp)
ament_target_dependencies(service_test rclcpp
  rclcpp
  msg_pkg  
)

install(TARGETS
  service_test
  DESTINATION lib/learning_node
)

add_executable(client_test src/client.cpp)
ament_target_dependencies(client_test rclcpp
  rclcpp
  msg_pkg  
)

install(TARGETS
  client_test
  DESTINATION lib/learning_node
)


ros2 run learning_node service_test
ros2 run learning_node client_test (don't run this)

ros2 service call /cal_two_floats msg_pkg/srv/Test "{a: 2.2, b: 9.1}"
Server side:
[INFO] [1721880654.754209820] [rclcpp]: Incoming request: a: 2.20 b: 9.10
[INFO] [1721880654.754327874] [rclcpp]: sending back response: 9.36. Success? 1
Client side
requester: making request: msg_pkg.srv.Test_Request(a=2.2, b=9.1)

response:
msg_pkg.srv.Test_Response(c=9.36215877532959, result=True)

ros2 service call /cal_two_floats msg_pkg/srv/Test "{a: 2.2, b: -9.1}"
Server side:
[INFO] [1721880687.212568170] [rclcpp]: Incoming request: a: 2.20 b: -9.10
[INFO] [1721880687.212668094] [rclcpp]: sending back response: 0.00. Success? 0
Client side:
requester: making request: msg_pkg.srv.Test_Request(a=2.2, b=-9.1)

response:
msg_pkg.srv.Test_Response(c=0.0, result=False)

======================5.3 Parameters ======================
ros2 param list                                                          :show param list
ros2 param describe <node_name> <param_name>                             : show detail
ros2 param get <node_name> <param_name>                                  : show value
ros2 param set <node_name> <param_name> <value>                          : set param
ros2 param dump <node_name>                                              : save param 
ros2 param load <node_name> <yaml_file_name>                             : load param file
ros2 run <pkg_name> <node_name> --ros-args --params-file <yaml_file_name>

declare a param with python
self.declare_parameter("param_name",<default_value>)
a_variable=self.get_parameter("param_name").get_parameter_value().integer_value

declare a param with C++
In private: 
int any_variable_type_name = <default_value>;
bool, bool[],int64, int64[], float64, float64[], string, string[], byte[]

In public->node construct function node_name(std::string name) : Node(name)
this->declare_parameter<std::int64_t>("any_other_variable_type_name", any_variable_type_name);

update param in callback fn
this->get_parameter("any_other_variable_type_name", any_variable_type_name);

======================5.4 Action======================
ros2 run turtlesim turtlesim_node
ros2 run turtlesim turtle_teleop_key

ros2 action list
ros2 action list -t
ros2 action info /turtle1/rotate_absolute
ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute "{theta: 3}"

======================6.1 Launch======================
1. new launch folder
2. new launch_file_name.launch.py
3. in the launch file: 
from launch import LaunchDescription           # launch文件的描述类
from launch_ros.actions import Node            # 节点启动的描述类

def generate_launch_description():             # 自动生成launch文件的函数
    return LaunchDescription([                 # 返回launch文件的描述信息
        Node(                                  # 配置一个节点的启动
            package='learning_node',          # 节点所在的功能包
            executable='pub_test', # 节点的可执行文件
        ),
        Node(                                  # 配置一个节点的启动
            package='learning_node',          # 节点所在的功能包
            executable='sub_test', # 节点的可执行文件名
        ),
    ])

4. In CMakeList.txt, add: 
install(DIRECTORY launch
  DESTINATION share/${PROJECT_NAME}
)

5. ros2 launch learning_node test.launch.py

======================6.2 rosbag2======================
ros2 bag record /topic_name1 topic_name2
ros2 bag record -a                                       :record all
ros2 bag record -o file-name <topic_name>
ros2 bag info <bag_file>
ros2 bag play <db3_file_name.db3>
ros2 bag play <db3_file_name.db3> -r <speed_play_rate>
ros2 bag play <db3_file_name.db3> -l                     : loop play
ros2 bag play <db3_file_name.db3> --topics <topic_name>


======================6.3 RQT======================
rqt                : start rqt GUI
plugins->introspection->Node Graph : rqt_graph

======================6.4 Rviz2======================
rviz2



======================1001 Arduino and ROS2, micro ROS======================
docker run -it --rm -v /dev:/dev -v /dev/shm:/dev/shm --privileged --net=host microros/micro-ros-agent:$ROS_DISTRO serial --dev /dev/ttyUSB0 -v6

if error report this: "colcon: error: unrecognized arguments: --packages-up-to micro_ros_agent"
when running "ros2 run micro_ros_setup build_agent.sh", 
use this to update pip: "pip install -U colcon-common-extensions" and build again


1. ros2 run micro_ros_agent micro_ros_agent serial --dev /dev/ttyUSB0
2. restart ESP32
3. ros2 topic list

#  No: from_arduino_msg.msg
#  No: From_arduino_msg.msg
# Yes: FromArduinoMsg.msg

# rosidl_adapter.parser.InvalidResourceName: 'From_arduino_msg' is an invalid
#   message name.  It should have the pattern '^[A-Z][A-Za-z0-9]*$'

# No: 
# float32 M1_speed
# float32 M2_speed
# int32 M1_encoder_speed
# int32 M2_encoder_speed

#  Error processing 'float32 M1_speed' of 'msg_pkg/ToArduinoMsg': ''M1_speed'
#   is an invalid field name.  It should have the pattern
#   '^(?!.*__)(?!.*_$)[a-z][a-z0-9_]*$''

# Yes: 
float32 m1_speed
float32 m2_speed
int32 m1_encoder_speed
int32 m2_encoder_speed


Generate custom header file 
========================(Useless and Endless bug)==========================
https://micro.ros.org/docs/tutorials/advanced/create_custom_static_library/
notes 1.1: 
cd ~/micro_ros_ws
touch my_custom_toolchain.cmake
touch my_custom_colcon.meta

notes 1.2
for pi4B (generated by Chatgpt 4):
set(CMAKE_SYSTEM_NAME Linux)
set(CMAKE_SYSTEM_PROCESSOR arm)

# 设置C和C++编译器路径
set(CMAKE_C_COMPILER /usr/bin/arm-linux-gnueabihf-gcc)
set(CMAKE_CXX_COMPILER /usr/bin/arm-linux-gnueabihf-g++)

# 设置编译标志
set(CMAKE_C_FLAGS_INIT "-march=armv8-a -mfpu=neon-fp-armv8 -mfloat-abi=hard" CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS_INIT "-march=armv8-a -mfpu=neon-fp-armv8 -mfloat-abi=hard" CACHE STRING "" FORCE)

set(CMAKE_EXE_LINKER_FLAGS_INIT "-static" CACHE STRING "" FORCE)

# 设置链接器和库路径
set(CMAKE_FIND_ROOT_PATH /usr/arm-linux-gnueabihf)
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

set(CMAKE_CROSSCOMPILING 1)
set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)



{
  "names": {
    "tracetools": {
      "cmake-args": [
        "-DTRACETOOLS_DISABLED=ON",
        "-DTRACETOOLS_STATUS_CHECKING_TOOL=OFF"
      ]
    },
    "rosidl_typesupport": {
      "cmake-args": [
        "-DROSIDL_TYPESUPPORT_SINGLE_TYPESUPPORT=ON"
      ]
    },
    "rcl": {
      "cmake-args": [
        "-DBUILD_TESTING=OFF",
        "-DRCL_COMMAND_LINE_ENABLED=OFF",
        "-DRCL_LOGGING_ENABLED=OFF"
      ]
    },
    "rcutils": {
      "cmake-args": [
        "-DENABLE_TESTING=OFF",
        "-DRCUTILS_NO_FILESYSTEM=ON",
        "-DRCUTILS_NO_THREAD_SUPPORT=ON",
        "-DRCUTILS_NO_64_ATOMIC=ON",
        "-DRCUTILS_AVOID_DYNAMIC_ALLOCATION=ON"
      ]
    },
    "microxrcedds_client": {
      "cmake-args": [
        "-DUCLIENT_PIC=OFF",
        "-DUCLIENT_PROFILE_UDP=OFF",
        "-DUCLIENT_PROFILE_TCP=OFF",
        "-DUCLIENT_PROFILE_DISCOVERY=OFF",
        "-DUCLIENT_PROFILE_SERIAL=OFF",
        "-DUCLIENT_PROFILE_STREAM_FRAMING=ON",
        "-DUCLIENT_PROFILE_CUSTOM_TRANSPORT=ON"
      ]
    },
    "rmw_microxrcedds": {
      "cmake-args": [
        "-DRMW_UXRCE_MAX_NODES=1",
        "-DRMW_UXRCE_MAX_PUBLISHERS=5",
        "-DRMW_UXRCE_MAX_SUBSCRIPTIONS=5",
        "-DRMW_UXRCE_MAX_SERVICES=1",
        "-DRMW_UXRCE_MAX_CLIENTS=1",
        "-DRMW_UXRCE_MAX_HISTORY=4",
        "-DRMW_UXRCE_TRANSPORT=custom"
      ]
    }
  }
}

ros2 run micro_ros_setup build_firmware.sh $(pwd)/my_custom_toolchain.cmake $(pwd)/my_custom_colcon.meta


======================1002 SLAM======================
- start toolbox: ros2 launch slam_toolbox online_sync_launch.py
- save map: ros2 run nav2_map_server map_saver_cli -f map

0. start LD19 LIDAR: ros2 launch ldlidar_stl_ros2 ld19.launch.py
show point cloud in rviz2: ros2 launch ldlidar_stl_ros2 viewer_ld19.launch.py

1. start communication to ESP32: 
ros2 run micro_ros_agent micro_ros_agent serial --dev /dev/ttyUSB0 -b 460800

2. start from_ard node: ros2 run ard_com from_ard
start to_ard node: ros2 run ard_com to_ard

3. check tf tree: ros2 run tf2_tools view_frames.py

- set the control loop/publish loop to 20 ms:
1. change "RCL_MSTONS(100)" to "RCL_MSTONS(0)"
2. go to libraries/micro_ros_arduino/default_transport.cpp, search "Serial.begin(", change baud rate from 115200 to 460800
3. in terminal, add arg: ros2 run micro_ros_agent micro_ros_agent serial --dev /dev/ttyUSB0 -b 460800

- show tf tree
1. install tf-tree
sudo apt update
sudo apt install ros-foxy-rqt-tf-tree
2. ros2 run rqt_tf_tree rqt_tf_tree --force-discover



